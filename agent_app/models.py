from django.db import models

# Create your models here.

#Should our ID's be integers or strings?
#You can change CharField to TextField where appropriate

#Django creates default primary keys:
#https://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields

class User(models.Model):
	user_id = models.CharField(max_length=70, primary_key=True) #our own defined ID
	name = models.CharField(max_length=70)
	birth_date = models.DateField()
	
	facebook_accountid = models.ForeignKey('Facebook_Account')
	linkedin_accountid = models.ForeignKey('LinkedIn_Account') #legal to have multiple foreign keys?

	def __unicode__(self):
		return self.name

class Account(models.Model):
	account_id = models.CharField(max_length=70, primary_key=True) #Our own defined unique id's
	
	def __unicode__(self):
		return self.site_name

class Facebook_Account(models.Model):
	facebook_id = models.CharField(max_length=70) #The ID that facebook defines
	facebook_name = models.CharField(max_length=70) #Should we separate to first and last name?
	account_id = models.ForeignKey(Account, primary_key=True) #Don't know if we need extra parameters here...

	def __unicode__(self):
		return self.facebook_name

class LinkedIn_Account(models.Model):
	linkedin_id = models.CharField(max_length=70) #The ID that linkedin defines
	linkedin_name = models.CharField(max_length=70) #Should we separate to first and last name?
	account_id = models.ForeignKey(Account, primary_key=True) #Don't know if we need extra parameters here...

	def __unicode__(self):
		return self.linkedin_name

#Hmm, so I guess we can't use both id's as the primary key here, so use the autogenerated primary key
class LI_Friends(models.Model):
	linkedin_id1 = models.ForeignKey(LinkedIn_Account, related_name='LI_Friends_id1')
	linkedin_id2 = models.ForeignKey(LinkedIn_Account, related_name='LI_Friends_id2')
	
	def __unicode__(self):
		return (self.linkedin_id1 + self.linkedin_id2)

#Hmm, so I guess we can't use both id's as the primary key here, so use the autogenerated primary key
class FB_Friends(models.Model):
	facebook_id1 = models.ForeignKey(Facebook_Account, related_name='FB_Friends_id1')
	facebook_id2 = models.ForeignKey(Facebook_Account, related_name='FB_Friends_id2')
	
	def __unicode__(self):
		return (self.facebook_id1 + self.facebook_id2)

#For now I broke down location into a couple different fields
#Primary key is autogenerated integer
class Place(models.Model):
	country = models.CharField(max_length=70)
	state = models.CharField(max_length=70)
	city = models.CharField(max_length=70)
	street_address = models.TextField()
	name = models.CharField(max_length=70)
	
	def __unicode__(self):
		return self.name

class Visits(models.Model):
	account_id = models.ForeignKey(Account)
	place = models.ForeignKey(Place) #using the default generated primary key
	
	def __unicode__(self):
		return (account_id + str(place)) #there's probably something better for this
	

#For Link's...
class Keyword(models.Model):
	word = models.CharField(max_length=70, primary_key=True) #I guess we can make this the primary key
	
	def __unicode(self):
		return self.word

#TODO: check that keywords is done correctly...
class Link(models.Model):
	url = models.CharField(max_length=70, primary_key=True)
	keywords = models.ManyToManyField(Keyword) #Make this a multi-valued field!
	
	def __unicode__(self):
		return self.url
	
class Messages(models.Model):
	message_id = models.CharField(max_length=70, primary_key=True)
	text = models.TextField() #How long can messages be?

	def __unicode__(self):
		return self.message_id
	
class Posts(models.Model):
	account_id = models.ForeignKey(Account)
	message_id = models.ForeignKey(Messages)
	
	def __unicode__(self):
		return (self.account_id + self.message_id)
	
#Are we saying that each message only contains 1 link?
class Contains(models.Model):
	message_id = models.ForeignKey(Messages)
	url = models.ForeignKey(Link)
	
	def __unicode__(self):
		return (self.message_id + self.url)
	
#Using the default primary key
class Interests(models.Model):
	name = models.CharField(max_length=70)
	type = models.CharField(max_length=70)
	
	def __unicode__(self):
		return self.name
	
class Has_Interest(models.Model):
	account_id = models.ForeignKey(Account)
	interest_id = models.ForeignKey(Interests) #uses the default primary key generated...I think it's an integer
	
	def __unicode__(self):
		return (self.account_id + str(self.interest_id))
	

